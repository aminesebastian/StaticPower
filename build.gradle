buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.minecraftforge.net' }	
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

group = "theking530"
archivesBaseName = "StaticPower"
version = "${mc_version}-${mod_version}" 

sourceSets {
    api
    staticcore
    staticpower
}

// Include resources generated by data generators.
sourceSets.each {
    it.resources.srcDirs += "src/${it.name}/generated/resources"
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle' 

minecraft {
	mappings channel: 'official', version: '1.19.2'
    accessTransformer = file('src/staticpower/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
			
			// For Patchuloi
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			
            mods {
                staticcore {  source sourceSets.staticcore }
                staticpower {  source sourceSets.staticpower }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
			
			// For Patchuloi
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			
            mods {
                staticcore {  source sourceSets.staticcore }
                staticpower {  source sourceSets.staticpower }
            }
        }

        sourceSets.each {
			"${it.name}Data" {
				workingDirectory project.file('run')

				property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
				property 'forge.logging.console.level', 'debug'

				// For Patchuloi
				property 'mixin.env.remapRefMap', 'true'
				property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

				args '--mod', '${it.name}'.toString(), '--all', '--output', file('src/${it.name}/generated/resources/'), '--existing', file('src/${it.name}/resources/')

				mods {
					staticcore {  source sourceSets.staticcore }
					staticpower {  source sourceSets.staticpower }
				}
			}
		}
    }
}

configurations {
	library
	implementation.extendsFrom library
	
	staticcoreCompile.extendsFrom compile
    staticpowerCompile.extendsFrom staticcoreCompile
}

minecraft.runs.all {
	lazyToken('minecraft_classpath') {
		configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
	}
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

	compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
	compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
	
	compileOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}")
	
    implementation fg.deobf("curse.maven:jade-324717:${jade_version}")
	implementation fg.deobf("codechicken:CodeChickenLib:${mc_version}-${ccl_version}:universal")
	
	compileOnly fg.deobf("curse.maven:the-one-probe-245211:3965693")

	staticpowerCompile sourceSets.staticcore.output
	
	// SQL driver
	library ('org.xerial:sqlite-jdbc:3.39.3.0') {
		transitive = false
	}
}

repositories {
	maven {
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven { 
		name = "Patchouli Maven"
		url = "https://maven.blamejared.com"
	}
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
	maven { 
		url 'https://oss.sonatype.org/content/repositories/snapshots' 
	}
	maven {
		url 'https://maven.covers1624.net'
	}
    maven {
        url "https://maven.k-4u.nl"
    }
}

jar.enabled = false //Disable main sourceset

task apiJar(type: Jar) {
    classifier "api"
    dependsOn compileApiJava
    from sourceSets.api.output
	archiveClassifier = 'api'
}

task staticcoreJar(type: Jar) {
    classifier "staticcore"
    dependsOn compileStaticcoreJava
    from sourceSets.staticcore.output
}

task staticpowerJar(type: Jar) {
    classifier "staticpower"
    dependsOn compileStaticpowerJava
    from sourceSets.staticpower.output
}

shadowJar {
   archiveFileName = jar.archiveFileName
   configurations = [project.configurations.library]
   relocate 'org.xerial:sqlite-jdbc', "${project.group}.relocated.sqlite-jdbc"
   finalizedBy 'reobfShadowJar'
}

reobf {
    jar { enabled = false } //Disable main sourceset
	apiJar { }
    staticcoreJar { }
    staticpowerJar { }
}

apiJar.finalizedBy('reobfApiJar')

staticcoreJar.finalizedBy('reobfStaticCoreJar')

staticpowerJar.dependsOn('shadowJar')
staticpowerJar.finalizedBy('reobfStaticPowerJar')


sourceSets.findAll {it.name != "main" && it.name != "test" } each { set ->
    def setNameCaps = "${set.name}".substring(0, 1).toUpperCase() + "${set.name}".substring(1)
    "process${setNameCaps}Resources" { task ->
        from(set.resources.srcDirs) { spec ->
            spec.include 'META-INF/mods.toml'
            task.doFirst {
                spec.expand 'version': config.mod_version,
                        'mc_version': config.mc_version
            }
        }
    }
}