buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.minecraftforge.net' }	
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mc_version}-${staticpower_major_version}.${staticpower_minor_version}." + "0"  //project.getProperty("build_number")
group = "com.theking530.staticpower" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "StaticPower"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}
def apiVersion = "${mc_version}-${staticpower_api_major_version}.${staticpower_api_minor_version}."  + "0"  // project.getProperty("build_number")
def coreVersion = "${mc_version}-${staticpower_core_major_version}.${staticpower_core_minor_version}."  + "0"  // project.getProperty("build_number")

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle' 

minecraft {
	mappings channel: 'official', version: '1.19.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
			
			// For Patchuloi
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
			
			// For Patchuloi
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

			// For Patchuloi
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'staticpower', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
	// Create the library configuration, where our non-mod libraries will be added to
	library
	// Any dependency in the library configuration will also be added to the implementation configuration
	implementation.extendsFrom library
}

minecraft.runs.all {
	lazyToken('minecraft_classpath') {
		configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
	}
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

	// compile against the JEI API but do not include it at runtime
	compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
	compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
	// at runtime, use the full JEI jar for Forge
	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
	
	compileOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}")
	
	// Visit https://www.curseforge.com/minecraft/mc-mods/jade/files/all
    // to get the latest version
    implementation fg.deobf("curse.maven:jade-324717:${jade_version}")
	
	implementation fg.deobf("codechicken:CodeChickenLib:${mc_version}-${ccl_version}:universal")
	
	// SQL driver
	library ('org.xerial:sqlite-jdbc:3.39.3.0') {
        transitive = false
    }
}

repositories {
	maven {
		// location of the maven that hosts JEI files
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven { 
		name = "Patchouli Maven"
		url = "https://maven.blamejared.com"
	}
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
	maven { 
		url 'https://oss.sonatype.org/content/repositories/snapshots' 
	}
	maven {
		url 'https://maven.covers1624.net'
	}
}

jar {
	archiveClassifier = 'slim'
    manifest {
        attributes([
			"Specification-Title"     : "staticpower",
			"Specification-Vendor"    : "theking530",
			"Specification-Version"   : "1", // We are version 1 of ourselves
			"Implementation-Title"    : project.name,
			"Implementation-Version"  : project.jar.archiveVersion,
			"Implementation-Vendor"   : "theking530",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
   archiveFileName = jar.archiveFileName
   configurations = [project.configurations.library]
   relocate 'org.xerial:sqlite-jdbc', "${project.group}.relocated.sqlite-jdbc"
   finalizedBy 'reobfShadowJar'
}


task deobfJar(type: Jar, dependsOn: 'jar') {
    from "build/source/main"
    classifier "dev"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

build.dependsOn sourcesJar
jar.finalizedBy('reobfJar')

artifacts {
	archives deobfJar
	archives sourcesJar
}

reobf {
    shadowJar {}
}

jar.dependsOn("shadowJar")